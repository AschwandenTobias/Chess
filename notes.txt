General TODOs:
-Make pawn into pieces on the other side
-Knight movement is broken
-Rooks can switch on different levels
-Pieces arent detected for Rooks
-Rooks can teleport

~from = 11111110

00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000


00000000_00000000_00000000_00000000_00000000_00000000_11111111_00000000 //Initial white Pawn Position

00000000_00000000_00000000_00000000_00000010_00000000_11111101_00000000 //g pawn 2 square movement

Rook:27

00000000_00000000_00000000_00000000_00000001_00000000_00000000_00000000
00000000_00000000_00000000_00000000_00010000_00000000_00000000_00000000



int distance = std::abs(endSquare - startSquare);
        std::cout << "Distance: " << distance << "\n";
        if (distance == 0) return false;
        if(distance < 8) {
            if(endSquare - startSquare < 0) {
                std::cout << "Rook move to the right detected\n";
                Bitboard tmp = 1ULL >> (startSquare - 1);
                for(int i = 0; i < distance; i++) {
                    if(board.checkIfPieceIsOnSquare(tmp)) return false;
                    tmp = tmp >> 1;
                }
            } else {
                std::cout << "Rook move to the left detected\n";
                Bitboard tmp = 1ULL << (startSquare + 1);
                for(int i = 0; i < distance; i++) {
                    if(board.checkIfPieceIsOnSquare(tmp)) return false;
                    tmp = tmp << 1;
                }
            }
        } else {
            if(endSquare - startSquare < 0) {
                std::cout << "Rook move down detected\n";
                Bitboard tmp = 1ULL >> (startSquare - 8);
                for(int i = 0; i < (distance/8) - 1; i++) {
                    if(board.checkIfPieceIsOnSquare(tmp)) return false;
                    tmp = tmp >> 8;
                }
            } else {
                std::cout << "Rook move up detected\n";
                Bitboard tmp = 1ULL << (startSquare + 8);
                for(int i = 0; i < (distance/8) - 1; i++) {
                    if(board.checkIfPieceIsOnSquare(tmp)) return false;
                    tmp = tmp << 8;
                }
            }
            
        }